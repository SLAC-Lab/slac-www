<?php

/**
 * @file
 *  Fieldset tags widget for taxonomy_term_reference field.
 */

/**
 * Implements hook_field_widget_info().
 */
function fieldset_tags_field_widget_info() {
  return array(
    'fieldset_tags' => array(
      'label' => t('Fieldset tags (tagging)'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'type' => 60,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function fieldset_tags_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $tags = array();
  foreach ($items as $item) {
    $tags[$item['tid']] = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
  }

  $vocab_machine_name = $field['settings']['allowed_values'][0]['vocabulary'];
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocab_machine_name);
  $vid = $vocabulary->vid;

  // Get all terms for the vocabulary.
  $terms = taxonomy_get_tree($vid);

  $element += array(
    '#type' => 'item',
    '#markup' => '',
    '#element_validate' => array('fieldset_tags_field_widget_validate'),
  );
  $element['tags'] = array(
    '#type' => 'fieldset',
    '#title' => $vocabulary->name,
    '#description' => t('Tags categorize content for searches and RSS feeds.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $default_values = array();
  foreach ($items as $item) {
    $default_values[$item['tid']] = $item['tid'];
  }

  $parent = NULL;
  $children = array();
  foreach ($terms as $term) {
    if ($term->parents[0] == 0) {
      // Build fieldset for previous terms group.
      if (!empty($parent)) {
        $element['tags'][] = _fieldset_tags_terms_form_element($parent, $children, $default_values);
      }
      $parent = $term;
      $children = array($term);
    }
    else {
      $children[] = $term;
    }
  }
  $element['tags'][] = _fieldset_tags_terms_form_element($parent, $children, $default_values);

  return $element;
}

function _fieldset_tags_terms_form_element($parent, $children, $global_default_values) {
  $element = array(
    '#type' => 'fieldset',
    '#title' => $parent->name,
    '#tree' => TRUE,
    '#collapsible' => TRUE,
  );
  $options = array();
  $default_values = array();
  foreach ($children as $term) {
    $tid = $term->tid;
    $options[$tid] = $term->name;
    if (in_array($tid, $global_default_values)) {
      $default_values[$tid] = $tid;
    }
  }
  $element['tag_options'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $default_values,
  );
  $element['#collapsed'] = empty($default_values);
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function fieldset_tags_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

function fieldset_tags_field_widget_validate($element, &$form_state) {
  $items = array();
  $result = array();
  _fieldset_tags_get_values($element['tags'], $result);

  foreach ($result as $value) {
    $items[] = array('tid' => $value);
  }

  $element['#value'] = $result;
  form_set_value($element, $items, $form_state);
}

function _fieldset_tags_get_values($element, &$result) {
  foreach ($element as $key => $value) {
    if (is_numeric($key) && isset($value['tag_options'])) {
      if (!empty($value['tag_options']['#value'])) {
        $result = $result + $value['tag_options']['#value'];
      }
    }
    elseif (is_numeric($key) && is_array($value)) {
      _fieldset_tags_get_values($value, $result);
    }
  }
}
