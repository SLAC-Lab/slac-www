<?php

/**
* Implements hook_entity_info_alter().
*/
function slac_image_lightbox_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['epsa_crop_mode'] = array(
    'label' => t('EPSA Crop Mode'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_file_formatter_info().
 */
function slac_image_lightbox_file_formatter_info() {
  $formatters = array();

  // Add a simple file formatter for displaying an image in a chosen style.
  if (module_exists('image')) {
    $formatters['slac_image_lightbox'] = array(
      'label' => t('SLAC Image Lightbox'),
      'description' => t('Displays image files in content in a popup lightbox'),
      'default settings' => array(
        'image_style' => '',
        'alt' => '',
        'title' => '',
      ),
      'view callback' => 'slac_image_lightbox_file_formatter_view',
      'settings callback' => 'file_entity_file_formatter_file_image_settings',
    );
    // Provide default token values.
    if (module_exists('token')) {
      $formatters['slac_image_lightbox']['default settings']['alt'] = '[file:field_file_image_alt_text]';
      $formatters['slac_image_lightbox']['default settings']['title'] = '[file:field_file_image_title_text]';
    }
    elseif (module_exists('entity_token')) {
      $formatters['slac_image_lightbox']['default settings']['alt'] = '[file:field-file-image-alt-text]';
      $formatters['slac_image_lightbox']['default settings']['title'] = '[file:field-file-image-title-text]';
    }
  }

  return $formatters;
}

function slac_image_lightbox_file_formatter_view($file, $display, $langcode) {
  // Prevent PHP notices when trying to read empty files.
  if (!$file->filesize) {
    return;
  }

  // Do not bother proceeding if this file does not have an image mime type.
  if (strpos($file->filemime, 'image/') !== 0) {
    return;
  }

  if (file_entity_file_is_readable($file) && isset($file->image_dimensions)) {
    $replace_options = array(
      'clear' => 1,
      'sanitize' => 0,
    );

    if (!empty($display['settings']['image_style'])) {
      $image_element = array(
        '#theme' => 'image_style',
        '#style_name' => $display['settings']['image_style'],
        '#path' => $file->uri,
        '#width' => $file->image_dimensions['width'],
        '#height' => $file->image_dimensions['height'],
        '#alt' => token_replace($display['settings']['alt'], array('file' => $file), $replace_options),
        '#title' => token_replace($display['settings']['title'], array('file' => $file), $replace_options),
      );
    }
    else {
      $image_element = array(
        '#theme' => 'image',
        '#path' => $file->uri,
        '#width' => $file->image_dimensions['width'],
        '#height' => $file->image_dimensions['height'],
        '#alt' => token_replace($display['settings']['alt'], array('file' => $file), $replace_options),
        '#title' => token_replace($display['settings']['title'], array('file' => $file), $replace_options),
      );
    }

    // Create image caption.
    if (isset($file->field_description[LANGUAGE_NONE][0]['value']) && !empty($image_element['#title'])) {
      $caption = '<p>' . $image_element['#title'] . '</p><p>' . $file->field_description[LANGUAGE_NONE][0]['value'] . '</p>';
    }
    elseif (isset($file->field_description[LANGUAGE_NONE][0]['value']) && empty($image_element['#title'])) {
      $caption = '<p>' . $file->field_description[LANGUAGE_NONE][0]['value'] . '</p>';
    }
    else {
      $caption = '<p>' . $image_element['#title'] . '</p>';
    }

    // Create 'lightbox_large_image' image style if it not exists.
    if (!image_style_load('lightbox_large_image')) {
      _slac_image_lightbox_create_style();
    }

    $style = 'lightbox_large_image';
    $new_image_url = '';
    $derivative_url = image_style_url($style, $file->uri);
    $success = file_exists($derivative_url) || image_style_create_derivative($style, $file->uri, $derivative_url);

    if (!$success) {
      $new_image_url  = file_create_url($derivative_url);
    }

    // Download path is provided by Download File module.
    // See Download File module permission to set restrictions for download.
    $image_download_href = 'download/file/fid/' . $file->fid;
    $image_download_link = array(
      '#type' => 'link',
      '#title' => t('Download original image'),
      '#href' => $image_download_href,
      '#options' => array(
        'html' => TRUE,
        'attributes' => array(
          'class' => array(),
          'id' => 'lightbox2-download-link-text'
        ),
      ),
    );

    $image_effect_width = 0;
    $image_effect_height = 0;
    $image_style = image_style_load('lightbox_large_image');
    $isid = $image_style['isid'];
    if (image_effect_load($isid, 'lightbox_large_image')) {
      $image_effect = image_effect_load($isid, 'lightbox_large_image');
      $image_effect_width = $image_effect['data']['width'];
      $image_effect_height = $image_effect['data']['height'];
    }

    $rendered_link = '';
    $lightbox_image_width = $file->image_dimensions['width'];
    $lightbox_image_height = $file->image_dimensions['height'];

    // Check if original image dimension is larger that image style dimensions
    // to set the url to the image that will be displayed in lightbox.
    if ($lightbox_image_width > $image_effect_width || $lightbox_image_height > $image_effect_height) {
      $rendered_link = render($image_download_link);
      $image_url = $new_image_url;
    }
    else {
      $image_url = str_replace('public:/', variable_get('file_public_path', 'sites/default/files'), $file->uri);;
    }

    $element = array(
      '#type' => 'link',
      '#title' => render($image_element),
      '#href' => $image_url,
      '#options' => array(
        'html' => TRUE,
        'attributes' => array(
          'class' => array(),
          'rel' => 'lightbox[][' . $caption . $rendered_link . ']',
        ),
      ),
    );

    return $element;
  }
}

/**
 * Create a new image style.
 */
function _slac_image_lightbox_create_style() {
  $style = image_style_save(array('name' => 'lightbox_large_image'));
  $effect = array(
    'name' => 'image_scale_and_crop',
    'data' => array(
      'width' => 1024,
      'height' => 786,
      'upscale' => TRUE,
    ),
    'isid' => $style['isid'],
  );
  image_effect_save($effect);
}
